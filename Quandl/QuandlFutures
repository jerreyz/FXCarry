quandl.ApiConfig.api_key = load_private_key()
QUANDL_FUTURES_CONFIG_FILE = get_filename_for_package("sysdata.quandl.QuandlFuturesConfig.csv")

import pandas as pd


class QuandlFuturesContract(futuresContract):
    """
    An individual futures contract, with additional Quandl methods
    """

    def __init__(self, futures_contract, quandl_instrument_data = USE_DEFAULT):
        """
        We always create a quandl contract from an existing, normal, contract

        :param futures_contract: of type FuturesContract
        """

        super().__init__(futures_contract.instrument, futures_contract.contract_date)

        if quandl_instrument_data is USE_DEFAULT:
            quandl_instrument_data = quandlFuturesConfiguration()

        self._quandl_instrument_data = quandl_instrument_data
        self.MONTH_LIST = ["F", "G", "H", "J", "K", "M", "N", "Q", "U", "V", "X", "Z"]
        
    @classmethod
    def fromQuandlCodeAndDate(cls,quandlCode,dateOfContract):
        try:
            # 1. Parse a string to datetime
            datestamp   = pd.to_datetime(dateOfContract,format='%Y%m')
        except:
            raise ValueError("Need a YYYYMM format ")
            
        # 3. Read in the Config file    
        cls.QuandlCSV = pd.read_csv(QUANDL_FUTURES_CONFIG_FILE).set_index("QCODE")
        
        # 4. Futures contract list in letters, How months are defined in Futures trading, weird I know
        MONTH_LIST = ["F", "G", "H", "J", "K", "M", "N", "Q", "U", "V", "X", "Z"]
        # 5 Get the correct month letter and concatenate it with the year
        quandl_date_id  = MONTH_LIST[datestamp.month-1] + str(datestamp.year)

        # 6. Concatenate the market code and quandl date id to get the timeseries id
        cls.quandlIdentifier = "%s/%s%s" % (cls.QuandlCSV.loc[quandlCode,"MARKET"],quandlCode,quandl_date_id )
        
        # Create a futures contract using classes
        return cls(futuresContract(futuresInstrument(cls.QuandlCSV.loc[quandlCode,"CODE"]),contractDate(dateOfContract)))
            
    def quandl_identifier(self):
        """
        Returns the Quandl identifier for a given contract

        :return: str
        """

        quandl_year = str(self.contract_date.year())
        quandl_month = self.contract_date.letter_month()

        try:
            quandl_date_id = quandl_month + quandl_year

            market = self.get_quandlmarket_for_instrument()
            codename = self.get_quandlcode_for_instrument()

            quandldef = '%s/%s%s' % (market, codename, quandl_date_id)

            return quandldef
        except:
            raise ValueError("Can't turn %s %s into a Quandl Contract" % (self.instrument_code, self.contract_date))

    def get_quandlcode_for_instrument(self):

        return self._quandl_instrument_data.get_quandlcode_for_instrument(self.instrument_code)

    def get_quandlmarket_for_instrument(self):

        return self._quandl_instrument_data.get_quandlmarket_for_instrument(self.instrument_code)

    def get_start_date(self):

        return self._quandl_instrument_data.get_start_date(self.instrument_code)

    def get_dividing_factor(self):

        return self._quandl_instrument_data.get_quandl_dividing_factor(self.instrument_code)
    
